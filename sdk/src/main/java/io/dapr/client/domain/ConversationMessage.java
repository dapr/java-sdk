/*
 * Copyright 2025 The Dapr Authors
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
limitations under the License.
*/

package io.dapr.client.domain;

import java.util.List;

/**
 * Represents a conversation message with role-specific content.
 * Supports different message types: system, user, assistant, developer, and tool.
 */
public class ConversationMessage {

  /**
   * Enum representing the different roles a message can have.
   */
  public enum Role {
    SYSTEM,
    USER, 
    ASSISTANT,
    DEVELOPER,
    TOOL
  }

  private final Role role;
  private final String name;
  private final List<ConversationMessageContent> content;
  private final List<ConversationToolCalls> toolCalls;
  private final String toolId;

  /**
   * Constructor for creating a message with basic content.
   *
   * @param role the role of the message sender
   * @param content the content of the message
   */
  public ConversationMessage(Role role, List<ConversationMessageContent> content) {
    this(role, null, content, null, null);
  }

  /**
   * Constructor for creating a message with name and content.
   *
   * @param role the role of the message sender
   * @param name the name of the participant (optional)
   * @param content the content of the message
   */
  public ConversationMessage(Role role, String name, List<ConversationMessageContent> content) {
    this(role, name, content, null, null);
  }

  /**
   * Full constructor for creating a message with all properties.
   *
   * @param role the role of the message sender
   * @param name the name of the participant (optional)
   * @param content the content of the message
   * @param toolCalls tool calls for assistant messages (optional)
   * @param toolId tool ID for tool messages (optional)
   */
  public ConversationMessage(Role role, String name, List<ConversationMessageContent> content, 
                           List<ConversationToolCalls> toolCalls, String toolId) {
    this.role = role;
    this.name = name;
    this.content = content != null ? List.copyOf(content) : null;
    this.toolCalls = toolCalls != null ? List.copyOf(toolCalls) : null;
    this.toolId = toolId;
  }

  /**
   * Gets the role of the message sender.
   *
   * @return the message role
   */
  public Role getRole() {
    return role;
  }

  /**
   * Gets the name of the participant in the message.
   *
   * @return the participant name, or null if not specified
   */
  public String getName() {
    return name;
  }

  /**
   * Gets the content of the message.
   *
   * @return the message content
   */
  public List<ConversationMessageContent> getContent() {
    return content;
  }

  /**
   * Gets the tool calls generated by the model (for assistant messages).
   *
   * @return the tool calls, or null if none
   */
  public List<ConversationToolCalls> getToolCalls() {
    return toolCalls;
  }

  /**
   * Gets the tool ID (for tool messages).
   *
   * @return the tool ID, or null if not a tool message
   */
  public String getToolId() {
    return toolId;
  }

  /**
   * Checks if this message has tool calls.
   *
   * @return true if the message has tool calls, false otherwise
   */
  public boolean hasToolCalls() {
    return toolCalls != null && !toolCalls.isEmpty();
  }
}
